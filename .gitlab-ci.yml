# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/npm.gitlab-ci.yml

publish:
  image: node:latest
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^\d+\.\d+(?:\.\d+)*$/
  script:
    - npm i
    - npm run build
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information: https://docs.gitlab.com/ee/user/packages/npm_registry/index.html#project-level-npm-endpoint-1'
        {
          echo "auto-install-peers=true"
          echo "//registry.npmjs.org/:_authToken=${NPM_GLOBAL_AUTH_TOKEN}"
        } >> .npmrc
      fi

    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$CI_COMMIT_TAG
    - PACKAGE_JSON_VERSION=$(node -p "require('./package.json').version")

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    # If $SIGSTORE_ID_TOKEN is set this template will generate a provenance
    # document. For more information refer to the documentation: https://docs.gitlab.com/ee/ci/yaml/signing_examples/
    - |
      if [[ "${NPM_PACKAGE_VERSION}" != "${PACKAGE_JSON_VERSION}" ]]; then
        echo "Version ${NPM_PACKAGE_VERSION} set by provided TAG is not matching version ${PACKAGE_JSON_VERSION} in package.json, so no new version has been published."
        exit 1
      fi
      if [[ "$(npm view ${NPM_PACKAGE_NAME} versions)" != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        if [[ -n "${SIGSTORE_ID_TOKEN}" ]]; then
          npm publish --provenance
        else
          npm publish
        fi
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to public NPM registry."
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi
